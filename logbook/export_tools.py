from reportlab.pdfgen import canvas
from pyPdf import PdfFileWriter, PdfFileReader
import StringIO
from io import BytesIO
from reportlab.lib.pagesizes import letter
import os
import random
import datetime
from django.http import Http404
from django.conf import settings


def get_usgs_quads(pts):
    from django.contrib.gis.gdal.datasource import DataSource

    shp_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 
                        "data", 'quadgrid_4326.shp')
    ds = DataSource(shp_path)
    layer = ds[0]

    quads = []
    for pt in pts:
        lng, lat = pt
        buf = 0.00000001
        layer.spatial_filter = (lng - buf, lat - buf, lng + buf, lat + buf)
        quads.extend([feat.get('Name') for feat in layer])

    return ', '.join(set(quads))


def get_adfg_region(pts):
    from django.contrib.gis.gdal.datasource import DataSource

    shp_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 
                        "data", 'adfg_regions_4326.shp')
    ds = DataSource(shp_path)
    layer = ds[0]

    quads = []
    for pt in pts:
        lng, lat = pt
        buf = 0.00000001
        layer.spatial_filter = (lng - buf, lat - buf, lng + buf, lat + buf)
        quads.extend([feat.get('REGION') for feat in layer])

    return ', '.join(set(quads))


def extend_meta_profile(meta, user):
    profile = user.get_profile()
    uname = profile.name
    if uname == '':
        uname = user.get_username()
    meta['user']  = uname
    meta['agency'] = profile.organization
    meta['addr1'] = profile.address
    meta['addr2'] = profile.city  # TODO profile needs state, zip
    meta['today'] = datetime.datetime.now().strftime("%Y-%m-%d")
    meta['email'] = user.email
    meta['phone'] = profile.phonenumber
    return meta

def get_obs_data(pi):
    data = {
      'lat': pi.lat,
      'lng': pi.lng,
    }

    for key in settings.FIELD_MAP.keys():
        data[key] = pi.to_dict().get(settings.FIELD_MAP[key], '')

    return data

def generate_pdf(id_string, submission_type, observations, user, permit_nums):
    from odk_viewer.models import ParsedInstance

    all_instances = ParsedInstance.objects.filter(instance__user=user,
                                        instance__xform__id_string=id_string,)

    # We should probably use the ORM filter for better performance but
    # I havent yet figured out how to query mongodb via ORM args
    pis = [x for x in all_instances 
              if x.to_dict()[settings.FIELD_MAP['permit_num']] in permit_nums
              and x.to_dict()['meta/instanceID'] in observations]

    if len(pis) == 0:
        raise Http404

    obs_data = [ get_obs_data(pi) for pi in pis ]

    pts = [(x['lng'], x['lat']) for x in obs_data]
    awc_num = ', '.join(set([x['awc_num'] for x in obs_data if x['awc_num']]))
    waterway = ', '.join(set([x['waterway'] for x in obs_data if x['waterway']]))

    meta = {
        'region': get_adfg_region(pts)[:26],
        'quad': get_usgs_quads(pts),
        'awc_num': awc_num,
        'awc_name': waterway, 
        'awc_name_type': 'local',  # TODO
        'nomination_type': submission_type,
    }

    meta = extend_meta_profile(meta, user)

    # Create pdf
    packet = StringIO.StringIO()
    can = canvas.Canvas(packet)

    # render a new PDF with Reportlab
    can = canvas.Canvas(packet, pagesize=letter)
    can.setFont('Courier', 9)

    # render metadata
    hs = [696, 673, 650, 631]
    can.drawString(78, hs[0] , meta['region'])
    can.drawString(342, hs[0], meta['quad'])
    can.drawString(270, hs[1], meta['awc_num'])
    can.drawString(160, hs[2], meta['awc_name'])

    if meta['awc_name_type'] == 'USGS':
        can.drawString(363, hs[2]+3, u"\u2713")
    elif meta['awc_name_type'] == 'local':
        can.drawString(466, hs[2]+3, u"\u2713")

    if meta['nomination_type'] == 'addition':
        can.drawString(59, hs[3], u"\u2713")
    elif meta['nomination_type'] == 'deletion':
        can.drawString(135, hs[3], u"\u2713")
    elif meta['nomination_type'] == 'correction':
        can.drawString(220, hs[3], u"\u2713")
    elif meta['nomination_type'] == 'backup':
        can.drawString(291, hs[3], u"\u2713")

    comment1 = "AWC nomination form generated by aklogbook.ecotrust.org"
    can.drawString(40, 280, comment1)
    if meta['email'] and meta['phone']:
        comment2 = "Contact Info: Email %s, Phone %s " % (meta['email'], meta['phone'])
        can.drawString(40, 240, comment2)

    can.drawString(220, 190, meta['user'])
    can.drawString(220, 160, meta['agency'])
    can.drawString(220, 145, meta['addr1'])
    can.drawString(220, 130, meta['addr2'])
    can.drawString(450, 175, meta['today'])

    # render observational data
    for i, sd in enumerate(obs_data):
        height = 422 - 15*i
        can.drawString(40, height, sd['species'])
        can.drawString(150, height, sd['date'])
        if sd['observation_type'].lower() == "spawning":
            can.drawString(295, height, u"\u2713")
        if sd['observation_type'].lower() == "rearing":
            can.drawString(360, height, u"\u2713")
        if sd['observation_type'].lower() == "present":
            can.drawString(440, height, u"\u2713")
        if sd['species_group'].lower().startswith("anadromous"):
            can.drawString(502, height, u"\u2713")
    can.save()

    #move to the beginning of the StringIO buffer
    packet.seek(0)
    new_pdf = PdfFileReader(packet)

    # read your existing PDF
    orig = os.path.join(os.path.dirname(os.path.abspath(__file__)), 
                        "original.pdf")
    existing_pdf = PdfFileReader(file(orig, "rb"))
    output = PdfFileWriter()
    # add the "watermark" (which is the new pdf) on the existing page
    page = existing_pdf.getPage(0)
    page.mergePage(new_pdf.getPage(0))
    output.addPage(page)

    # Add a page for each observation
    for pi in pis:
        obs_page = get_obs_pdf(pi)
        output.addPage(obs_page)

    # finally, return output
    outputStream = BytesIO()
    output.write(outputStream)

    final = outputStream.getvalue()
    outputStream.close()

    return final


def generate_frp_xls(id_string, biol_date, user, permit_nums):
    from odk_viewer.models import ParsedInstance
    import xlrd
    from xlutils.copy import copy

    all_instances = ParsedInstance.objects.filter(instance__user=user,
                                        instance__xform__id_string=id_string,)

    # We should probably use the ORM filter for better performance but
    # I havent yet figured out how to query mongodb via ORM args
    if len(permit_nums) > 1:
        raise Exception("Only one permit number per FRP export")

    pis = [x for x in all_instances 
              if x.to_dict()[settings.FIELD_MAP['permit_num']] in permit_nums]

    if len(pis) == 0:
        raise Http404

    obs_data = [ get_obs_data(pi) for pi in pis ]

    pts = [(x['lng'], x['lat']) for x in obs_data]

    meta = {
        'region': get_adfg_region(pts),
        'quad': get_usgs_quads(pts),
        'biologist_contact': biol_date
    }

    meta = extend_meta_profile(meta, user)

    content = StringIO.StringIO()

    # read your existing PDF
    file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 
                        "frp_original.xls")
    orig_book = xlrd.open_workbook(file_path, formatting_info=True)
    wb = copy(orig_book)
    ws = wb.get_sheet(0)
    start_row_idx = 4

    ws.write(0, 0, "ADF&G permit no. %s" % obs_data[0]['permit_num'])
    ws.write(2, 0, "The area biologist was contacted on: %s" % meta['biologist_contact'])

    for i, obs in enumerate(obs_data):
        ws.write(start_row_idx+i,0,obs['permit_num'])
        ws.write(start_row_idx+i,1,obs['lat'])
        ws.write(start_row_idx+i,2,obs['lng'])
        ws.write(start_row_idx+i,3,"WGS84")
        ws.write(start_row_idx+i,4,"MobileGPS")
        ws.write(start_row_idx+i,5,obs['waterway'])
        ws.write(start_row_idx+i,6,obs['date'])
        ws.write(start_row_idx+i,7,meta['user'])
        ws.write(start_row_idx+i,8,obs['fishcollectionmethod'])
        ws.write(start_row_idx+i,9,obs['species'])
        ws.write(start_row_idx+i,10,obs['lifestage'])
        ws.write(start_row_idx+i,11,obs['length'])
        ws.write(start_row_idx+i,12,obs['lengthmethod'])
        ws.write(start_row_idx+i,13,obs['weight'])
        ws.write(start_row_idx+i,14,obs['sex'])
        ws.write(start_row_idx+i,15,obs['age'])
        ws.write(start_row_idx+i,16,obs['agemethod'])
        ws.write(start_row_idx+i,17,obs['gcl'])
        ws.write(start_row_idx+i,18,obs['add_cnt1'])
        ws.write(start_row_idx+i,19,obs['disp1'])
        ws.write(start_row_idx+i,20,obs['add_cnt2'])
        ws.write(start_row_idx+i,21,obs['disp2'])
        ws.write(start_row_idx+i,22,obs['comments'])

        
    wb.save(content)

    final = content.getvalue() 
    content.close()
    return final


def get_obs_pdf(pi):

    import xhtml2pdf.pisa as pisa
    import cStringIO as StringIO

    point = {
      'lat': pi.lat,
      'lng': pi.lng,
    }

    # According to https://developers.google.com/maps/documentation/staticmaps/#api_key
    # "Note that the use of a key is not required, though it is recommended."
    # ... so we go without a key for simplicity
    map_template = "http://maps.googleapis.com/maps/api/staticmap?center=%(lat)f,%(lng)f" \
              "&size=800x600&maptype=terrain" \
              "&markers=color:blue%%7C%(lat)f,%(lng)f&sensor=false" 
                            #TODO - change map size for overview map
    detail_map = map_template % point + "&zoom=12"
    overview_map = map_template % point + "&zoom=8"

    pi_dict = pi.to_dict()
    data_dict = pi.data_dictionary

    rows = ""
    for key in sorted(pi_dict.keys()):
        if key in settings.IGNORED_OUTPUT_FIELDS:
            continue
        val = pi_dict[key]
        label = data_dict.get_label(key)
        rows += """
                <tr>
                   <th>%s</th>
                   <td align="left">%s</td>
                </tr>
        """ % (label, val)

    html = """
    <!-- EWWW table based layout (plays nicer with pisa) -->
    <style>
      td {text-align: left; vertical-align:top}
      th {text-align: right; margin-right:20px}
    </style>

    <table>
      <tr>
        <td align="center" colspan="2">
           <h2> Observation Summary </h2>
           <br>
        </td>
      </tr>
      <tr>
        <td>
            <p> Observation Detail </p>
            <table>
            %s
            </table>
        </td>
        <td>
            <p> Detail Map </p>
            <img src="%s">  
            <br>
            <p> Overview Map </p>
            <img src="%s">  
        </td>
      </tr>
    </table>

    """ % (rows, detail_map, overview_map)

    result = StringIO.StringIO()
    pdf = pisa.CreatePDF(html, result)
    
    if pdf.err:
        raise Exception("Pisa failed to create a pdf for observation")
    else:
        obs_pdf = PdfFileReader(result)
        obs_page = obs_pdf.getPage(0)
        return obs_page
